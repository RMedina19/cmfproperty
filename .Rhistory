}
prd_output <- c(round(mean(generated_prds, na.rm = TRUE), 4),
round(sd(generated_prds, na.rm = TRUE), 4))
return(prd_output)
}
prb_func <- function(df, ratio_col, assessed_value_col, sale_price_col, bootstrap_iters){
#create dataframe for regression
reg_data <-
data.frame(
ratio = df[[ratio_col]],
sale_price = df[[sale_price_col]],
fitted_value = df[[assessed_value_col]],
log2 = log(2)
)
prb_formula <-
lm(((ratio - median(ratio)) / median(ratio)) ~ I(log(0.5 * (
sale_price + fitted_value / median(ratio)
)) / log2),
data = reg_data,
na.action = na.exclude)
prb_output <- c(round(summary(prb_formula)$coefficients[2], 4),
round(summary(prb_formula)$coefficients[2, "Std. Error"], 4))
return(prb_output)
}
get_stats <- function(df, bootstrap_iters){
cod_calcs <- cod_func(df, "RATIO", bootstrap_iters)
prd_calcs <- prd_func(df, "RATIO", "SALE_PRICE", bootstrap_iters)
prb_calcs <- prb_func(df, "RATIO", "ASSESSED_VALUE", "SALE_PRICE", bootstrap_iters)
stats <- data.frame(
N = nrow(df),
COD = cod_calcs[1],
COD_SE = cod_calcs[2],
PRD = prd_calcs[1],
PRD_SE = prd_calcs[2],
PRB = prb_calcs[1],
PRB_SE = prb_calcs[2],
q1_ratio = quantile(df$RATIO)[[2]],
median_ratio = median(df$RATIO),
q3_ratio = quantile(df$RATIO)[[4]],
q1_sale = quantile(df$SALE_PRICE)[[2]],
median_sale = median(df$SALE_PRICE),
q3_sale = quantile(df$SALE_PRICE)[[4]],
q1_assessed_value = quantile(df$ASSESSED_VALUE)[[2]],
median_assessed_value = quantile(df$ASSESSED_VALUE)[[3]],
q3_assessed_value = quantile(df$ASSESSED_VALUE)[[4]]
)
return(stats)
}
calc_iaao_stats <- function(ratios) {
stats <- data.frame()
for (y in sort(unique(ratios$SALE_YEAR))) {
mini_df <- ratios[ratios["SALE_YEAR"] == y,]
new <- get_stats(mini_df, 100)
new["Year"] <- y
stats <- rbind(stats, new)
}
return(stats)
}
calc_iaao_stats(ratios)
?mutate
?group_by
?ifelse
evtools::document()
devtools::document()
devtools::document()
devtools::document()
?calc_iaao_stats
#
library(data.table)
df <- data.table::fread("E:/report data/Buffalo/joined.csv")
reprocess_data <-
function(df, sale_col, assessment_col, sale_year_col, overwrite = FALSE,
keep_ratios_only = TRUE, market_value_col = NULL, tax_year_col = NULL) {
#rename columns
df[["SALE_PRICE"]] <- df[[sale_col]]
df[["ASSESSED_VALUE"]] <- df[[assessment_col]]
df[["SALE_YEAR"]] <- df[[sale_year_col]]
if (!is.null(tax_year_col)) {
df[["TAX_YEAR"]] <- df[[tax_year_col]]
} else {
df[["TAX_YEAR"]] <- df[[sale_year_col]]
}
if (!is.null(market_value_col)) {
df[["MARKET_VALUE"]] <- df[[market_value_col]]
}
#arm's length
df <- calc_ratio_and_mark_arms_length(df, overwrite)
if(keep_ratios_only){
df <- df %>% dplyr::filter(arms_length_transaction == 1, !is.na(RATIO))
}
return(df)
}
ratios <- reprocess_data(df, "Sale Price", "total_assessment", "Sale_year", "full_market_value")
ratios <- reprocess_data(df, "Sale Price", "total_assessment", "Sale_year", FALSE, TRUE, "full_market_value")
ratios <- reprocess_data(df, "Sale Price", "total_assessment", "Sale_year", FALSE, TRUE, "full_market_value")
reprocess_data <-
function(df, sale_col, assessment_col, sale_year_col, overwrite = FALSE,
keep_ratios_only = TRUE, market_value_col = NULL, tax_year_col = NULL) {
#rename columns
df[["SALE_PRICE"]] <- df[[sale_col]]
df[["ASSESSED_VALUE"]] <- df[[assessment_col]]
df[["SALE_YEAR"]] <- df[[sale_year_col]]
if (!is.null(tax_year_col)) {
df[["TAX_YEAR"]] <- df[[tax_year_col]]
} else {
df[["TAX_YEAR"]] <- df[[sale_year_col]]
}
if (!is.null(market_value_col)) {
df[["MARKET_VALUE"]] <- df[[market_value_col]]
}
#arm's length
df <- calc_ratio_and_mark_arms_length(df, overwrite)
if(keep_ratios_only){
df <- df %>% dplyr::filter(arms_length_transaction == 1, !is.na(RATIO))
}
return(df)
}
ratios <- reprocess_data(df, "Sale Price", "total_assessment", "Sale_year", FALSE, TRUE, "full_market_value")
df <- data.table::fread("E:/report data/Buffalo/joined.csv")
df
ratios <- reprocess_data(df, "Sale Price", "total_assessment", "Sale_Year", FALSE, TRUE, "full_market_value")
ratios
calc_iaao_stats(ratios)
devtools::document()
devtools::document()
devtools::document()
?reformat_data
?calc_iaao_stats
search()
search()
df <- data.table::fread("E:/report data/Buffalo/joined.csv")
# df <- data.table::fread("E:/report data/Buffalo/joined.csv")
# ratios <- reprocess_data(df, "Sale Price", "total_assessment", "Sale_Year", FALSE, TRUE, "full_market_value")
# calc_iaao_stats(ratios)
calc_ratio_and_mark_arms_length <- function(df) {
df <-
df %>% dplyr::mutate(RATIO = ifelse(
!is.na(SALE_PRICE),
ifelse(SALE_PRICE > 100, ASSESSED_VALUE / SALE_PRICE, NA),
NA
))
df <- df %>% dplyr::group_by(TAX_YEAR) %>%
dplyr::mutate(arms_length_transaction = ifelse(!is.na(RATIO),
ifelse((
RATIO > quantile(RATIO, na.rm = TRUE)[[4]] + 1.5 * IQR(RATIO, na.rm = TRUE)
) |
(
RATIO < quantile(RATIO, na.rm = TRUE)[[2]] - 1.5 * IQR(RATIO, na.rm = TRUE)
),
0,
1
), NA))
return(df)
}
#' Reformats data for analysis by changing column names and filtering out non-arm's length sales.
#'
#' @param df a dataframe with assessment, sales, and time data
#' @param sale_col the name of the column with sales data
#' @param assessment_col the name of the column with assessment data
#' @param sale_year_col the name of the column with the year of sale
#' @param filter_data if True, keeps only arm's length sales. if False, keeps all data.
#' @param market_value_col optional, the name of the column with market value data
#' @param tax_year_col optional, the name of the column with tax year data. The default is to set to the sale year.
#'
#'@return a dataframe with appropriate column names and arm's length markings
reformat_data <-
function(df, sale_col, assessment_col, sale_year_col, filter_data,
market_value_col = NULL, tax_year_col = NULL) {
#rename columns
df[["SALE_PRICE"]] <- df[[sale_col]]
df[["ASSESSED_VALUE"]] <- df[[assessment_col]]
df[["SALE_YEAR"]] <- df[[sale_year_col]]
if (!is.null(tax_year_col)) {
df[["TAX_YEAR"]] <- df[[tax_year_col]]
} else {
df[["TAX_YEAR"]] <- df[[sale_year_col]]
}
if (!is.null(market_value_col)) {
df[["MARKET_VALUE"]] <- df[[market_value_col]]
}
#arm's length
df <- calc_ratio_and_mark_arms_length(df)
if(keep_ratios_only){
df <- df %>% dplyr::filter(arms_length_transaction == 1, !is.na(RATIO))
}
return(df)
}
cod_func <- function(df, ratio_col, bootstrap_iters){
n <- length(df)
generated_cods <- NULL
for (i in 1:bootstrap_iters){
s <- sample_n(data.frame(df[[ratio_col]]), n, replace = T)
generated_cods[i] <-
100 * sum(abs(s[, 1] - median(s[, 1]))) / (n * median(s[, 1]))
}
cod_output <- c(round(mean(generated_cods, na.rm = TRUE), 4),
round(sd(generated_cods, na.rm = TRUE), 4))
return(cod_output)
}
prd_func <- function(df, ratio_col, sale_price_col, bootstrap_iters) {
generated_prds <- NULL
for (i in 1:bootstrap_iters) {
df <-
sample_n(data.frame(df),  nrow(df), replace = TRUE)
generated_prds[i] <-
mean(df[[ratio_col]],  na.rm = TRUE) / weighted.mean(df[[ratio_col]], df[[sale_price_col]], na.rm = TRUE)
}
prd_output <- c(round(mean(generated_prds, na.rm = TRUE), 4),
round(sd(generated_prds, na.rm = TRUE), 4))
return(prd_output)
}
prb_func <- function(df, ratio_col, assessed_value_col, sale_price_col, bootstrap_iters){
#create dataframe for regression
reg_data <-
data.frame(
ratio = df[[ratio_col]],
sale_price = df[[sale_price_col]],
fitted_value = df[[assessed_value_col]],
log2 = log(2)
)
prb_formula <-
lm(((ratio - median(ratio)) / median(ratio)) ~ I(log(0.5 * (
sale_price + fitted_value / median(ratio)
)) / log2),
data = reg_data,
na.action = na.exclude)
prb_output <- c(round(summary(prb_formula)$coefficients[2], 4),
round(summary(prb_formula)$coefficients[2, "Std. Error"], 4))
return(prb_output)
}
get_stats <- function(df, bootstrap_iters){
cod_calcs <- cod_func(df, "RATIO", bootstrap_iters)
prd_calcs <- prd_func(df, "RATIO", "SALE_PRICE", bootstrap_iters)
prb_calcs <- prb_func(df, "RATIO", "ASSESSED_VALUE", "SALE_PRICE", bootstrap_iters)
stats <- data.frame(
N = nrow(df),
COD = cod_calcs[1],
COD_SE = cod_calcs[2],
PRD = prd_calcs[1],
PRD_SE = prd_calcs[2],
PRB = prb_calcs[1],
PRB_SE = prb_calcs[2],
q1_ratio = quantile(df$RATIO)[[2]],
median_ratio = median(df$RATIO),
q3_ratio = quantile(df$RATIO)[[4]],
q1_sale = quantile(df$SALE_PRICE)[[2]],
median_sale = median(df$SALE_PRICE),
q3_sale = quantile(df$SALE_PRICE)[[4]],
q1_assessed_value = quantile(df$ASSESSED_VALUE)[[2]],
median_assessed_value = quantile(df$ASSESSED_VALUE)[[3]],
q3_assessed_value = quantile(df$ASSESSED_VALUE)[[4]]
)
return(stats)
}
#' Evaluates the accuracy of assessments.
#'
#' @param ratios A dataframe which has been pre-processed by \code{\link{reformat_data}}
#' @return Various statistics and facts on assessments by year
#' @examples
#' calc_iaao_stats(ratios)
calc_iaao_stats <- function(ratios) {
stats <- data.frame()
for (y in sort(unique(ratios$SALE_YEAR))) {
mini_df <- ratios[ratios["SALE_YEAR"] == y,]
new <- get_stats(mini_df, 100)
new["Year"] <- y
stats <- rbind(stats, new)
}
return(stats)
}
ratios <- reprocess_data(df, "Sale Price", "total_assessment", "Sale_Year", FALSE, TRUE, "full_market_value")
ratios <- reformat_data(df, "Sale Price", "total_assessment", "Sale_Year", TRUE, "full_market_value")
library(devtools)
use_mit_license()
?use_mit_license
use_mit_license(name = find_name())
use_mit_license(name = "Eric Langowski")
use_readme_rmd()
use_data_raw()
data <- read.csv("E:/report data/Franklin County/columbusonly.csv")
data
use_data(data)
devtools::use_vignette("Example-Analysis")
??devtools
pkgdown::build_site()
install.packages("pkgdown")
pkgdown::build_site()
df <- read.csv("data-raw/example_data.csv)
df <- read.csv("data-raw/example_data.csv")
df
df$RATIO <- ifelse(!is.na(df$SALE_PRICE),
ifelse(df$SALE_PRICE > 100, df$ASSESSED_VALUE / df$SALE_PRICE, NA),
NA)
df <-
df %>% dplyr::mutate(RATIO = ifelse(
!is.na(SALE_PRICE),
ifelse(SALE_PRICE > 100, ASSESSED_VALUE / SALE_PRICE, NA),
NA
))
library(magrittr)
df <-
df %>% dplyr::mutate(RATIO = ifelse(
!is.na(SALE_PRICE),
ifelse(SALE_PRICE > 100, ASSESSED_VALUE / SALE_PRICE, NA),
NA
))
df
#'
#' @param df a dataframe with assessment, sales, and time data
#' @param sale_col the name of the column with sales data
#' @param assessment_col the name of the column with assessment data
#' @param sale_year_col the name of the column with the year of sale
#' @param filter_data if True, keeps only arm's length sales. if False, keeps all data.
#' @param market_value_col optional, the name of the column with market value data
#' @param tax_year_col optional, the name of the column with tax year data. The default is to set to the sale year.
#'
#'@return a dataframe with appropriate column names and arm's length markings
reformat_data <-
function(df, sale_col, assessment_col, sale_year_col, filter_data,
market_value_col = NULL, tax_year_col = NULL) {
#rename columns
df[["SALE_PRICE"]] <- df[[sale_col]]
df[["ASSESSED_VALUE"]] <- df[[assessment_col]]
df[["SALE_YEAR"]] <- df[[sale_year_col]]
if (!is.null(tax_year_col)) {
df[["TAX_YEAR"]] <- df[[tax_year_col]]
} else {
df[["TAX_YEAR"]] <- df[[sale_year_col]]
}
if (!is.null(market_value_col)) {
df[["MARKET_VALUE"]] <- df[[market_value_col]]
}
#arm's length
df <- calc_ratio_and_mark_arms_length(df)
if(keep_ratios_only){
df <- df %>% dplyr::filter(arms_length_transaction == 1, !is.na(RATIO))
}
return(df)
}
names(df)
reformat_data(df, "PRICE", "ASSESSED_VALUE", "SALE_YEAR", FALSE)
calc_ratio_and_mark_arms_length <- function(df) {
df <-
df %>% dplyr::mutate(RATIO = ifelse(
!is.na(SALE_PRICE),
ifelse(SALE_PRICE > 100, ASSESSED_VALUE / SALE_PRICE, NA),
NA
))
df <- df %>% dplyr::group_by(TAX_YEAR) %>%
dplyr::mutate(arms_length_transaction = ifelse(!is.na(RATIO),
ifelse((
RATIO > quantile(RATIO, na.rm = TRUE)[[4]] + 1.5 * IQR(RATIO, na.rm = TRUE)
) |
(
RATIO < quantile(RATIO, na.rm = TRUE)[[2]] - 1.5 * IQR(RATIO, na.rm = TRUE)
),
0,
1
), NA))
return(df)
}
calc_ratio_and_mark_arms_length <- function(df) {
df <-
df %>% dplyr::mutate(RATIO = ifelse(
!is.na(SALE_PRICE),
ifelse(SALE_PRICE > 100, ASSESSED_VALUE / SALE_PRICE, NA),
NA
))
df <- df %>% dplyr::group_by(TAX_YEAR) %>%
dplyr::mutate(arms_length_transaction = ifelse(!is.na(RATIO),
ifelse((
RATIO > quantile(RATIO, na.rm = TRUE)[[4]] + 1.5 * IQR(RATIO, na.rm = TRUE)
) |
(
RATIO < quantile(RATIO, na.rm = TRUE)[[2]] - 1.5 * IQR(RATIO, na.rm = TRUE)
),
0,
1
), NA))
return(df)
}
reformat_data(df, "PRICE", "ASSESSED_VALUE", "SALE_YEAR", FALSE)
#'
#' @param df a dataframe with assessment, sales, and time data
#' @param sale_col the name of the column with sales data
#' @param assessment_col the name of the column with assessment data
#' @param sale_year_col the name of the column with the year of sale
#' @param filter_data if True, keeps only arm's length sales. if False, keeps all data.
#' @param market_value_col optional, the name of the column with market value data
#' @param tax_year_col optional, the name of the column with tax year data. The default is to set to the sale year.
#'
#'@return a dataframe with appropriate column names and arm's length markings
reformat_data <-
function(df, sale_col, assessment_col, sale_year_col, filter_data,
market_value_col = NULL, tax_year_col = NULL) {
#rename columns
df[["SALE_PRICE"]] <- df[[sale_col]]
df[["ASSESSED_VALUE"]] <- df[[assessment_col]]
df[["SALE_YEAR"]] <- df[[sale_year_col]]
if (!is.null(tax_year_col)) {
df[["TAX_YEAR"]] <- df[[tax_year_col]]
} else {
df[["TAX_YEAR"]] <- df[[sale_year_col]]
}
if (!is.null(market_value_col)) {
df[["MARKET_VALUE"]] <- df[[market_value_col]]
}
#arm's length
df <- calc_ratio_and_mark_arms_length(df)
if(filter_data){
df <- df %>% dplyr::filter(arms_length_transaction == 1, !is.na(RATIO))
}
return(df)
}
reformat_data(df, "PRICE", "ASSESSED_VALUE", "SALE_YEAR", FALSE)
#'
#' @param df a dataframe with assessment, sales, and time data
#' @param sale_col the name of the column with sales data
#' @param assessment_col the name of the column with assessment data
#' @param sale_year_col the name of the column with the year of sale
#' @param filter_data if True, keeps only arm's length sales. if False, keeps all data.
#' @param market_value_col optional, the name of the column with market value data
#' @param tax_year_col optional, the name of the column with tax year data. The default is to set to the sale year.
#'
#'@return a dataframe with appropriate column names and arm's length markings
reformat_data <-
function(df, sale_col, assessment_col, sale_year_col, filter_data,
market_value_col = NULL, tax_year_col = NULL) {
#rename columns
names(df)[names(df) == sale_col] <- 'SALE_PRICE'
names(df)[names(df) == assessment_col] <- 'ASSESSED_VALUE'
names(df)[names(df) == sale_year_col] <- 'SALE_YEAR'
if (!is.null(tax_year_col)) {
names(df)[names(df) == tax_year_col] <- 'TAX_YEAR'
} else {
df[["TAX_YEAR"]] <- df[[sale_year_col]]
}
if (!is.null(market_value_col)) {
names(df)[names(df) == market_value_col] <- 'MARKET_VALUE'
}
#arm's length
df <- calc_ratio_and_mark_arms_length(df)
if(filter_data){
df <- df %>% dplyr::filter(arms_length_transaction == 1, !is.na(RATIO))
}
return(df)
}
reformat_data(df, "PRICE", "ASSESSED_VALUE", "SALE_YEAR", FALSE)
library(cmfproperty)
devtools::document()
?quantile
?IQR
?sample_n
?median
?sd
?mean
?quantile
?weighted.mean
?lm
?na.exclude
?quantile
devtools::document()
library(cmfproperty)
devtools::use_testthat()
devtools::use_testthat
devtools::uses_testthat()
devtools::has_tests()
devtools::has_tests()
install.packages("testthat")
install.packages("testthat")
use_test("my-test")
library(usethis)
use_test("my-test")
?test_that
library(testthat)
file.exists("data-raw/example_data.csv")
?expect_true
library(cmfproperty)
install.packages("formatR")
formatR::tidy_dir("R")
search()
library(cmfproperty)
library(cmfproperty)
devtools::document()
devtools::document()
library(cmfproperty)
cmfproperty::reformat_data()
devtools::document()
devtools::document()
library(cmfproperty)
load_example_data()
df <- load_example_data()
names(df)
df <- load_example_data()
df
?reformat_data
calc_iaao_stats(df)
# arm's length
df <- calc_ratio_and_mark_arms_length(df)
formatR::tidy_dir("R")
devtools::document()
# add ratio
df <- df %>% dplyr::mutate(RATIO = ifelse(!is.na(SALE_PRICE), ifelse(SALE_PRICE > 100, ASSESSED_VALUE/SALE_PRICE, NA),
NA))
# add arm's length
df <- df %>% dplyr::group_by(TAX_YEAR) %>% dplyr::mutate(arms_length_transaction = ifelse(!is.na(RATIO), ifelse((RATIO >
stats::quantile(RATIO, na.rm = TRUE)[[4]] + 1.5 * stats::IQR(RATIO, na.rm = TRUE)) | (RATIO < stats::quantile(RATIO,
na.rm = TRUE)[[2]] - 1.5 * stats::IQR(RATIO, na.rm = TRUE)), 0, 1), NA))
cmfproperty::reformat_data(df, "SALE_PRICE", "ASSESSED_VALUE",
"SALE_YEAR", TRUE)
df
library(cmfproperty)
